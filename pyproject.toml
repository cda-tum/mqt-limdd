[build-system]
requires = [
    "setuptools>=61",
    "setuptools_scm[toml]>=7",
    "ninja>=1.10; sys_platform != 'win32'",
    "cmake>=3.14",
]
build-backend = "setuptools.build_meta"

[project]
name = "mqt.limdd"
description = "A quantum simulator based on LIMDDs written in C++"
readme = "README.md"
authors = [
    { name = "Stefan Hillmich", email = "stefan.hillmich@scch.at"},
    { name = "Lieuwe Vinkhuijzen", email = "l.t.vinkhuijzen@liacs.leidenuniv.nl"}
]
keywords = ["MQT", "quantum computing", "design automation", "quantum circuit simulation", "simulation"]
license = { file = "LICENSE" }

classifiers=[
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: C++",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
]
requires-python = ">=3.8"
dependencies = [
    "qiskit-terra>=0.20.0, <0.45"
]
dynamic = ["version"]

[project.optional-dependencies]
tnflow = [
    "sparse",
    "opt-einsum",
    "quimb",
    "pandas",
    "numpy"
]
tests = [
    "pytest>=7"
]
coverage = [
    "mqt.limdd[tests]",
    "pytest-cov"
]
docs = [
    "sphinx>=5,<7",
    "sphinx-rtd-theme",
    "sphinx-rtd-dark-mode",
    "sphinxcontrib-bibtex>=2.4.2",
    "sphinx-copybutton",
    "sphinxext-opengraph",
    "ipython",
    "ipykernel",
    "nbsphinx",
    "breathe",
    "qiskit-terra[visualization]",
]
dev = ["mqt.limdd[tnflow, coverage, docs]"]

[project.urls]
Homepage = "https://github.com/cda-tum/mqt-limdd"
"Bug Tracker" = "https://github.com/cda-tum/mqt-limdd/issues"
Discussions = "https://github.com/cda-tum/mqt-limdd/discussions"
Research = "https://www.cda.cit.tum.de/research/quantum_simulation/"

[tool.setuptools.packages.find]
include = ["mqt.*"]


[tool.setuptools_scm]


[tool.cibuildwheel]
build = "cp3*"
skip = "*-musllinux_*"
archs = "auto64"
test-extras = ["test"]
test-command = "python -c \"from mqt import ddsim\""
test-skip = "cp312-*"  # qiskit-terra does not support python 3.12 yet
environment = { DEPLOY = "ON" }
build-frontend = "build"
build-verbosity = 3

[tool.cibuildwheel.linux]

[tool.cibuildwheel.macos]
environment = { MACOSX_DEPLOYMENT_TARGET = "10.15", DEPLOY = "ON" }

[tool.cibuildwheel.windows]
before-build = "pip install delvewheel"
repair-wheel-command = "delvewheel repair -v -w {dest_dir} {wheel}"


[tool.ruff]
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
select = [
    "E", "F", "W", # flake8
    "A",           # flake8-builtins
#    "ARG",         # flake8-unused-arguments
#    "ANN",         # flake8-annotations
    "ASYNC",       # flake8-async
    "B",  "B904",  # flake8-bugbear
    "C4",          # flake8-comprehensions
#    "D",           # pydocstyle
    "EM",          # flake8-errmsg
    "EXE",         # flake8-executable
    "FA",          # flake8-future-annotations
    "I",           # isort
    "ICN",         # flake8-import-conventions
    "ISC",         # flake8-implicit-str-concat
#    "N",           # flake8-naming
    "NPY",         # numpy
    "PERF",        # perflint
    "PGH",         # pygrep-hooks
    "PIE",         # flake8-pie
    "PL",          # pylint
    "PT",          # flake8-pytest-style
#    "PTH",         # flake8-use-pathlib
    "PYI",         # flake8-pyi
    "Q",           # flake8-quotes
    "RET",         # flake8-return
    "RSE",         # flake8-raise
    "RUF",         # Ruff-specific
    "SLF",         # flake8-self
    "SLOT",        # flake8-slots
    "SIM",         # flake8-simplify
    "TCH",         # flake8-type-checking
    "TID",         # flake8-tidy-imports
    "TRY",         # tryceratops
    "UP",          # pyupgrade
    "YTT",         # flake8-2020
]
extend-ignore = [
    "ANN101",  # Missing type annotation for self in method
    "ANN102",  # Missing type annotation for cls in classmethod
    "E501",    # Line too long (Black is enough)
    "PLR",     # Design related pylint codes
    "PT009",   # Use a regular `assert` instead of unittest-style `assertAlmostEqual`
    "SIM116",  # Use a dictionary instead of consecutive `if` statements
]
flake8-unused-arguments.ignore-variadic-names = true
isort.required-imports = ["from __future__ import annotations"]
line-length = 120

[tool.ruff.per-file-ignores]
"*.pyi" = ["D"]  # pydocstyle
"*.ipynb" = [
    "D",    # pydocstyle
    "E402", # Allow imports to appear anywhere in Jupyter notebooks
    "I002", # Allow missing `from __future__ import annotations` import
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.black]
line-length = 120

[tool.pytest.ini_options]
minversion = "7.0"
addopts = ["-ra", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
    "error",
    'ignore:.*qiskit.__qiskit_version__.*:DeprecationWarning:qiskit:',
]
log_cli_level = "info"
testpaths = ["test/python"]

[tool.coverage]
run.source = ["mqt.limdd"]
report.show_missing = true
report.skip_empty = true
report.precision = 1
report.exclude_lines = [
    'pragma: no cover',
    '\.\.\.',
    'if typing.TYPE_CHECKING:',
]
